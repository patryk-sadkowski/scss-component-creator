@import "./button.scss";
@mixin defineComponent($options) {
    $sizes: map-get( $map: $options, $key: sizes, );
    $styles: map-get( $map: $options, $key: styles, );
    $elements: null;
    $variations: map-get( $map: $options, $key: variations, );
    $componentName: map-get( $map: $options, $key: componentName, );
    $componentPrefix: -#{$componentName};
    @if ($styles) {
        @include createStyles($styles, $componentPrefix, null);
    }
    @if ($variations) {
        @include createVariations($variations, $componentPrefix);
    }
    @if ($sizes) {
        $componentSizesPrefix: --size#{$componentPrefix};
        $sizesStyles: map-get( $map: $sizes, $key: styles, );
        @if ($sizesStyles) {
            @include createStylesForSize( $sizesStyles, $componentSizesPrefix, null, null);
        }
        $elements: map-get( $map: $sizes, $key: elements, );
        @if ($elements) {
            @each $elementName,
            $elementOptions in $elements {
                $elementStyles: map-get( $map: $elementOptions, $key: styles, );
                $elementVariations: map-get( $map: $elementOptions, $key: variations, );
                @include createStylesForSize( $elementStyles, $componentSizesPrefix, null, $elementName);
                @if ($elementVariations) {
                    @each $elementVariationName,
                    $elementVariationOptions in $elementVariations {
                        $elementVariationStyle: map-get( $map: $elementVariationOptions, $key: styles, );
                        @include createStylesForSize( $elementVariationStyle, $componentSizesPrefix, $elementVariationName, $elementName);
                    }
                }
            }
        }
    }
}

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1)+$replace+str-replace( str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@mixin createStyles($styles, $prefix, $modificator) {
    @each $property,
    $value in $styles {
        @include conceptName($prefix, $modificator, $property, $value);
    }
}

@mixin createStylesForSize($styles, $prefix, $modificator, $elementName) {
    $defaultSizes: getDefaultSizes();
    $mapOfCurrentPropertySizes2: ();
    $computedElementName: $elementName;
    @if ($elementName) {
        $computedElementName: __#{$elementName};
        @if ($modificator) {
            $computedElementName: #{$computedElementName}--#{$modificator};
        }
    }
    @each $property,
    $values in $styles {
        $mapOfCurrentPropertySizes: ();
        @each $size in $defaultSizes {
            $currentValue: null;
            @if (length($list: $values)==3) {
                $currentValue: nth( $list: $values, $n: index( $list: $defaultSizes, $value: $size, ), );
            }
            @else {
                $currentValue: nth( $list: $values, $n: 1, );
            }
            @if ($size=="small") {
                $mapOfCurrentPropertySizes: map-merge( $map1: $mapOfCurrentPropertySizes, $map2: ( "xsmall": createLeftHandOfConceptName( $prefix, "xsmall#{$computedElementName}", $property), ), );
                @include conceptName( $prefix, "xsmall#{$computedElementName}", $property, var(createLeftHandOfConceptName($prefix, #{$size}#{$computedElementName}, $property)));
            }
            $mapOfCurrentPropertySizes: map-merge( $map1: $mapOfCurrentPropertySizes, $map2: ( #{$size}: createLeftHandOfConceptName( $prefix, #{$size}#{$computedElementName}, $property), ), );
            @include conceptName( $prefix, #{$size}#{$computedElementName}, $property, $currentValue);
            @if ($size=="large") {
                $mapOfCurrentPropertySizes: map-merge( $map1: $mapOfCurrentPropertySizes, $map2: ( "xlarge": createLeftHandOfConceptName( $prefix, "xlarge#{$computedElementName}", $property), ), );
                @include conceptName( $prefix, "xlarge#{$computedElementName}", $property, var(createLeftHandOfConceptName($prefix, #{$size}#{$computedElementName}, $property)));
            }
        }
        $mapOfCurrentPropertySizes2: map-merge( $map1: $mapOfCurrentPropertySizes2, $map2: ( #{$property}: $mapOfCurrentPropertySizes, ), );
        @include createSizeThemesFromSizeMaps($mapOfCurrentPropertySizes2);
    }
}

@mixin createSizeThemesFromSizeMaps($map) {
    @debug $map;
    &.componentSizeLarge,
    .componentSizeLarge {
        @each $propertyName,
        $propertyOptions in $map {
            $small: map-get( $map: $propertyOptions, $key: small, );
            $medium: map-get( $map: $propertyOptions, $key: medium, );
            $large: map-get( $map: $propertyOptions, $key: large, );
            #{str-replace($small, '--size', '')}: var(#{$small});
            #{str-replace(str-replace($medium, '--medium', ''), '--size', '')}: var( #{$medium});
            #{str-replace($large, '--size', '')}: var(#{$large});
        }
    }
    &.componentSizeNormal,
    .componentSizeNormal {
        @each $propertyName,
        $propertyOptions in $map {
            $xsmall: map-get( $map: $propertyOptions, $key: xsmall, );
            $small: map-get( $map: $propertyOptions, $key: small, );
            $medium: map-get( $map: $propertyOptions, $key: medium, );
            #{str-replace($xsmall, '--size', '')}: var(#{$small});
            #{str-replace(str-replace($small, '--medium', ''), '--size', '')}: var( #{$small});
            #{str-replace($medium, '--size', '')}: var(#{$medium});
        }
    }
}

@mixin createVariations($variations, $prefix) {
    @each $variationName,
    $variationOptions in $variations {
        $variationStyles: map-get( $map: $variationOptions, $key: styles, );
        $variationsOfVariation: map-get( $map: $variationOptions, $key: variations, );
        @include createStyles($variationStyles, $prefix, $variationName);
        @if ($variationsOfVariation) {
            $subVariationPrefix: #{$prefix}--#{$variationName};
            @include createVariations($variationsOfVariation, $subVariationPrefix);
        }
    }
}

@function createLeftHandOfConceptName($prefix, $modificator, $property) {
    @if ($prefix and $modificator) {
        @return --concept#{$prefix}--#{$modificator}_#{$property};
    }
    @else if ($prefix and not $modificator) {
        @return --concept#{$prefix}_#{$property};
    }
}

@mixin conceptName($prefix, $modificator, $property, $value) {
    #{createLeftHandOfConceptName(
 $prefix,
    $modificator,
    $property)
}

: #{$value};

}
@function getDefaultSizes() {
    @return ("small",
    "medium",
    "large");
}
.concept {
    @include defineComponent($buttonOptions);
}